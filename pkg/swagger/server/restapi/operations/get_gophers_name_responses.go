// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetGophersNameOKCode is the HTTP code returned for type GetGophersNameOK
const GetGophersNameOKCode int = 200

/*GetGophersNameOK Returns the gopher.

swagger:response getGophersNameOK
*/
type GetGophersNameOK struct {

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewGetGophersNameOK creates GetGophersNameOK with default headers values
func NewGetGophersNameOK() *GetGophersNameOK {

	return &GetGophersNameOK{}
}

// WithPayload adds the payload to the get gophers name o k response
func (o *GetGophersNameOK) WithPayload(payload io.ReadCloser) *GetGophersNameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get gophers name o k response
func (o *GetGophersNameOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGophersNameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetGophersNameBadRequestCode is the HTTP code returned for type GetGophersNameBadRequest
const GetGophersNameBadRequestCode int = 400

/*GetGophersNameBadRequest Invalid characters in "name" were provided.

swagger:response getGophersNameBadRequest
*/
type GetGophersNameBadRequest struct {
}

// NewGetGophersNameBadRequest creates GetGophersNameBadRequest with default headers values
func NewGetGophersNameBadRequest() *GetGophersNameBadRequest {

	return &GetGophersNameBadRequest{}
}

// WriteResponse to the client
func (o *GetGophersNameBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}
