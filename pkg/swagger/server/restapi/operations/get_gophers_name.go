// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetGophersNameHandlerFunc turns a function with the right signature into a get gophers name handler
type GetGophersNameHandlerFunc func(GetGophersNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetGophersNameHandlerFunc) Handle(params GetGophersNameParams) middleware.Responder {
	return fn(params)
}

// GetGophersNameHandler interface for that can handle valid get gophers name params
type GetGophersNameHandler interface {
	Handle(GetGophersNameParams) middleware.Responder
}

// NewGetGophersName creates a new http.Handler for the get gophers name operation
func NewGetGophersName(ctx *middleware.Context, handler GetGophersNameHandler) *GetGophersName {
	return &GetGophersName{Context: ctx, Handler: handler}
}

/* GetGophersName swagger:route GET /gophers/{name} getGophersName

Return the Gopher Image

*/
type GetGophersName struct {
	Context *middleware.Context
	Handler GetGophersNameHandler
}

func (o *GetGophersName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetGophersNameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
